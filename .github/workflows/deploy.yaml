name: Deploy Application

on:
  push:
    branches:
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: todo-web/package-lock.json

    - name: Install frontend dependencies
      working-directory: todo-web
      run: npm install

    - name: Build frontend
      working-directory: todo-web
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build backend Docker image
      run: |
        docker buildx build --platform linux/amd64 \
          -t backend/backend:latest -f ./server/Dockerfile --load ./server

    - name: Verify backend Docker image
      run: |
        docker images backend/backend:latest

    - name: Save backend Docker image
      run: |
        docker save backend/backend:latest > backend.tar

    - name: Create .env file
      run: |
        echo "CACHE_CONN=${{ secrets.CACHE_CONN }}" >> .env
        echo "DB_CONN=${{ secrets.DB_CONN }}" >> .env
        echo "EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }}" >> .env
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "MAGICLINK_BASE=${{ secrets.MAGICLINK_BASE }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "PRODUCTION=${{ secrets.PRODUCTION }}" >> .env
        echo "SERVER=${{ secrets.SERVER }}" >> .env
        echo "SERVICE_HOSTNAME=${{ secrets.SERVICE_HOSTNAME }}" >> .env

    - name: Transfer .env file to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER: ${{ secrets.SERVER }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key
        chmod 600 key
        rsync -avz -e "ssh -i key -o StrictHostKeyChecking=no" .env $USERNAME@$SERVER:$APP_PATH/.env

    - name: Create remote directory
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER: ${{ secrets.SERVER }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        echo "$SSH_PRIVATE_KEY" > key
        chmod 600 key
        ssh -i key -o StrictHostKeyChecking=no $USERNAME@$SERVER 'mkdir -p /home/todo/'

    - name: Deploy to server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER: ${{ secrets.SERVER }}
        USERNAME: ${{ secrets.USERNAME }}
      run: |
        APP_PATH=/home/todo/
        echo "$SSH_PRIVATE_KEY" > key
        chmod 600 key
        rsync -avz -e "ssh -i key -o StrictHostKeyChecking=no" backend.tar $USERNAME@$SERVER:$APP_PATH/backend.tar
        rsync -avz -e "ssh -i key -o StrictHostKeyChecking=no" compose.yaml $USERNAME@$SERVER:$APP_PATH/docker-compose.yml
        rsync -avz -e "ssh -i key -o StrictHostKeyChecking=no" Caddyfile $USERNAME@$SERVER:$APP_PATH/Caddyfile
        rsync -avz -e "ssh -i key -o StrictHostKeyChecking=no" todo-web/dist/ $USERNAME@$SERVER:$APP_PATH/dist/
        ssh -i key -o StrictHostKeyChecking=no $USERNAME@$SERVER '
          cd /home/$USERNAME/todo &&
          docker compose down &&
          docker rmi $(docker images -q) --force &&
          docker load -i backend.tar &&
          docker compose up -d --build
        '

